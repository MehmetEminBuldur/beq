name: beq

services:
  # Vector database for RAG
  qdrant:
    image: qdrant/qdrant:latest
    container_name: beq-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BeQ Microservices
  orchestrator:
    build:
      context: .
      dockerfile: services/orchestrator/Dockerfile
    container_name: beq-orchestrator
    env_file:
      - ./global.env
    environment:
      - DOCKER_ENV=true
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./services/orchestrator:/app
    networks:
      - beq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  scheduler:
    build:
      context: .
      dockerfile: services/scheduler/Dockerfile
    container_name: beq-scheduler
    env_file:
      - ./global.env
    environment:
      - DOCKER_ENV=true
    ports:
      - "8001:8001"
    restart: unless-stopped
    networks:
      - beq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  rag-recommender:
    build:
      context: .
      dockerfile: services/rag-recommender/Dockerfile
    container_name: beq-rag-recommender
    env_file:
      - ./global.env
    environment:
      - DOCKER_ENV=true
    ports:
      - "8002:8002"
    depends_on:
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - beq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  calendar-integration:
    build:
      context: .
      dockerfile: services/calendar-integration/Dockerfile
    container_name: beq-calendar-integration
    env_file:
      - ./global.env
    environment:
      - DOCKER_ENV=true
    ports:
      - "8003:8003"
    restart: unless-stopped
    networks:
      - beq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Frontend application
  web:
    build:
      context: ./clients/web
      dockerfile: Dockerfile
    container_name: beq-web
    env_file:
      - ./global.env
    environment:
      - DOCKER_ENV=true
      - NODE_ENV=development
      # Use same localhost URLs as local development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_ORCHESTRATOR_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SCHEDULER_API_URL=http://localhost:8001
      - NEXT_PUBLIC_RAG_API_URL=http://localhost:8002
      - NEXT_PUBLIC_CALENDAR_API_URL=http://localhost:8003
    ports:
      - "3000:3000"
    depends_on:
      - orchestrator
    restart: unless-stopped
    volumes:
      - ./clients/web:/app
      - /app/node_modules
    networks:
      - beq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  qdrant_data:

networks:
  beq-network:
    driver: bridge
    name: beq-network
